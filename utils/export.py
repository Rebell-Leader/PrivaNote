import json
from datetime import datetime

class ExportService:
    """Handle exporting meeting data to various formats"""
    
    def __init__(self):
        pass
    
    def to_markdown(self, meeting_data):
        """
        Export meeting data to Markdown format
        
        Args:
            meeting_data (dict): Meeting data
            
        Returns:
            str: Markdown formatted content
        """
        
        # Header
        md_content = f"# {meeting_data.get('title', 'Meeting Notes')}\n\n"
        
        # Metadata
        md_content += "## Meeting Information\n\n"
        md_content += f"- **Date:** {meeting_data.get('date', 'N/A')}\n"
        md_content += f"- **Duration:** {meeting_data.get('duration', 0):.1f} minutes\n"
        
        if meeting_data.get('notes'):
            md_content += f"- **Additional Notes:** {meeting_data['notes']}\n"
        
        md_content += f"- **Processed:** {self._format_datetime(meeting_data.get('created_at'))}\n\n"
        
        # Summary
        analysis = meeting_data.get('analysis', {})
        if analysis.get('summary'):
            md_content += "## Summary\n\n"
            md_content += f"{analysis['summary']}\n\n"
        
        # Action Items
        action_items = analysis.get('action_items', [])
        if action_items:
            md_content += "## Action Items\n\n"
            for i, item in enumerate(action_items, 1):
                md_content += f"{i}. {item}\n"
            md_content += "\n"
        
        # Key Decisions
        key_decisions = analysis.get('key_decisions', [])
        if key_decisions:
            md_content += "## Key Decisions\n\n"
            for i, decision in enumerate(key_decisions, 1):
                md_content += f"{i}. {decision}\n"
            md_content += "\n"
        
        # Topics Discussed
        topics = analysis.get('topics_discussed', [])
        if topics:
            md_content += "## Topics Discussed\n\n"
            for topic in topics:
                md_content += f"- {topic}\n"
            md_content += "\n"
        
        # Participants
        participants = analysis.get('participants', [])
        if participants:
            md_content += "## Participants\n\n"
            for participant in participants:
                md_content += f"- {participant}\n"
            md_content += "\n"
        
        # Next Steps
        next_steps = analysis.get('next_steps', [])
        if next_steps:
            md_content += "## Next Steps\n\n"
            for i, step in enumerate(next_steps, 1):
                md_content += f"{i}. {step}\n"
            md_content += "\n"
        
        # Full Transcript
        if meeting_data.get('transcript'):
            md_content += "## Full Transcript\n\n"
            md_content += f"```\n{meeting_data['transcript']}\n```\n\n"
        
        # Footer
        md_content += "---\n"
        md_content += "*Generated by PrivaNote - Privacy-First Meeting Assistant*\n"
        md_content += f"*Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n"
        
        return md_content
    
    def to_json(self, meeting_data, pretty=True):
        """
        Export meeting data to JSON format
        
        Args:
            meeting_data (dict): Meeting data
            pretty (bool): Whether to format JSON prettily
            
        Returns:
            str: JSON formatted content
        """
        
        # Create export-friendly version
        export_data = meeting_data.copy()
        export_data['exported_at'] = datetime.now().isoformat()
        export_data['export_format'] = 'json'
        
        if pretty:
            return json.dumps(export_data, indent=2, ensure_ascii=False)
        else:
            return json.dumps(export_data, ensure_ascii=False)
    
    def to_txt(self, meeting_data):
        """
        Export meeting data to plain text format
        
        Args:
            meeting_data (dict): Meeting data
            
        Returns:
            str: Plain text formatted content
        """
        
        txt_content = f"{meeting_data.get('title', 'Meeting Notes')}\n"
        txt_content += "=" * len(meeting_data.get('title', 'Meeting Notes')) + "\n\n"
        
        # Meeting Information
        txt_content += "MEETING INFORMATION\n"
        txt_content += "-" * 19 + "\n"
        txt_content += f"Date: {meeting_data.get('date', 'N/A')}\n"
        txt_content += f"Duration: {meeting_data.get('duration', 0):.1f} minutes\n"
        
        if meeting_data.get('notes'):
            txt_content += f"Notes: {meeting_data['notes']}\n"
        
        txt_content += f"Processed: {self._format_datetime(meeting_data.get('created_at'))}\n\n"
        
        # Analysis content
        analysis = meeting_data.get('analysis', {})
        
        if analysis.get('summary'):
            txt_content += "SUMMARY\n"
            txt_content += "-------\n"
            txt_content += f"{analysis['summary']}\n\n"
        
        action_items = analysis.get('action_items', [])
        if action_items:
            txt_content += "ACTION ITEMS\n"
            txt_content += "------------\n"
            for i, item in enumerate(action_items, 1):
                txt_content += f"{i}. {item}\n"
            txt_content += "\n"
        
        key_decisions = analysis.get('key_decisions', [])
        if key_decisions:
            txt_content += "KEY DECISIONS\n"
            txt_content += "-------------\n"
            for i, decision in enumerate(key_decisions, 1):
                txt_content += f"{i}. {decision}\n"
            txt_content += "\n"
        
        # Full transcript
        if meeting_data.get('transcript'):
            txt_content += "FULL TRANSCRIPT\n"
            txt_content += "---------------\n"
            txt_content += f"{meeting_data['transcript']}\n\n"
        
        # Footer
        txt_content += "-" * 50 + "\n"
        txt_content += "Generated by PrivaNote - Privacy-First Meeting Assistant\n"
        txt_content += f"Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        return txt_content
    
    def to_csv_action_items(self, meeting_data):
        """
        Export action items to CSV format
        
        Args:
            meeting_data (dict): Meeting data
            
        Returns:
            str: CSV formatted action items
        """
        
        csv_content = "Meeting Title,Date,Action Item,Status\n"
        
        action_items = meeting_data.get('analysis', {}).get('action_items', [])
        title = meeting_data.get('title', 'Untitled Meeting')
        date = meeting_data.get('date', 'N/A')
        
        for item in action_items:
            # Escape commas and quotes in CSV
            escaped_title = title.replace('"', '""')
            escaped_item = item.replace('"', '""')
            
            csv_content += f'"{escaped_title}","{date}","{escaped_item}","Pending"\n'
        
        return csv_content
    
    def _format_datetime(self, datetime_str):
        """Format datetime string for display"""
        if not datetime_str:
            return "N/A"
        
        try:
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            return dt.strftime('%Y-%m-%d %H:%M:%S')
        except Exception:
            return datetime_str
    
    def get_export_formats(self):
        """Get list of available export formats"""
        return [
            {
                'name': 'Markdown',
                'extension': 'md',
                'description': 'Structured markdown format suitable for documentation',
                'mime_type': 'text/markdown'
            },
            {
                'name': 'JSON',
                'extension': 'json',
                'description': 'Machine-readable format with all data',
                'mime_type': 'application/json'
            },
            {
                'name': 'Plain Text',
                'extension': 'txt',
                'description': 'Simple text format for basic viewing',
                'mime_type': 'text/plain'
            },
            {
                'name': 'CSV (Action Items)',
                'extension': 'csv',
                'description': 'Action items in spreadsheet format',
                'mime_type': 'text/csv'
            }
        ]
    
    def export_meeting(self, meeting_data, format_type='markdown'):
        """
        Export meeting in specified format
        
        Args:
            meeting_data (dict): Meeting data
            format_type (str): Export format
            
        Returns:
            tuple: (content, filename, mime_type)
        """
        
        safe_title = "".join(c for c in meeting_data.get('title', 'meeting') if c.isalnum() or c in (' ', '-', '_')).rstrip()
        date_str = meeting_data.get('date', datetime.now().strftime('%Y-%m-%d'))
        
        if format_type == 'markdown':
            content = self.to_markdown(meeting_data)
            filename = f"{safe_title}_{date_str}.md"
            mime_type = "text/markdown"
        elif format_type == 'json':
            content = self.to_json(meeting_data)
            filename = f"{safe_title}_{date_str}.json"
            mime_type = "application/json"
        elif format_type == 'txt':
            content = self.to_txt(meeting_data)
            filename = f"{safe_title}_{date_str}.txt"
            mime_type = "text/plain"
        elif format_type == 'csv':
            content = self.to_csv_action_items(meeting_data)
            filename = f"{safe_title}_{date_str}_action_items.csv"
            mime_type = "text/csv"
        else:
            raise ValueError(f"Unsupported export format: {format_type}")
        
        return content, filename, mime_type
